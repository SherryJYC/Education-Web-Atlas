{"remainingRequest":"/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/src/views/Imprint.vue?vue&type=template&id=37f6663f&","dependencies":[{"path":"/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/src/views/Imprint.vue","mtime":1586586473648},{"path":"/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sherry/Desktop/Git/Multi-Media-Carto-Project-2020/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}